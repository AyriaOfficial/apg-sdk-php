<?php
/**
 * PaymentApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * APG API
 *
 * This is a [APG (Ayria Payment Gateway) API](https://api.ayria.club/docs/index.html#_apg_ayria_payment_gateway) SDK.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PaymentApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getPaymentByReferenceCode
     *
     * Find payment with referenceCode
     *
     * @param  string $apg_wallet_id apg_wallet_id (required)
     * @param  string $reference_code ReferenceCode of payment to return (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AyriaPaymentV1DTO
     */
    public function getPaymentByReferenceCode($apg_wallet_id, $reference_code)
    {
        list($response) = $this->getPaymentByReferenceCodeWithHttpInfo($apg_wallet_id, $reference_code);
        return $response;
    }

    /**
     * Operation getPaymentByReferenceCodeWithHttpInfo
     *
     * Find payment with referenceCode
     *
     * @param  string $apg_wallet_id (required)
     * @param  string $reference_code ReferenceCode of payment to return (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AyriaPaymentV1DTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentByReferenceCodeWithHttpInfo($apg_wallet_id, $reference_code)
    {
        $request = $this->getPaymentByReferenceCodeRequest($apg_wallet_id, $reference_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AyriaPaymentV1DTO' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AyriaPaymentV1DTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AyriaPaymentV1DTO';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AyriaPaymentV1DTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentByReferenceCodeAsync
     *
     * Find payment with referenceCode
     *
     * @param  string $apg_wallet_id (required)
     * @param  string $reference_code ReferenceCode of payment to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentByReferenceCodeAsync($apg_wallet_id, $reference_code)
    {
        return $this->getPaymentByReferenceCodeAsyncWithHttpInfo($apg_wallet_id, $reference_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentByReferenceCodeAsyncWithHttpInfo
     *
     * Find payment with referenceCode
     *
     * @param  string $apg_wallet_id (required)
     * @param  string $reference_code ReferenceCode of payment to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentByReferenceCodeAsyncWithHttpInfo($apg_wallet_id, $reference_code)
    {
        $returnType = '\OpenAPI\Client\Model\AyriaPaymentV1DTO';
        $request = $this->getPaymentByReferenceCodeRequest($apg_wallet_id, $reference_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentByReferenceCode'
     *
     * @param  string $apg_wallet_id (required)
     * @param  string $reference_code ReferenceCode of payment to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentByReferenceCodeRequest($apg_wallet_id, $reference_code)
    {
        // verify the required parameter 'apg_wallet_id' is set
        if ($apg_wallet_id === null || (is_array($apg_wallet_id) && count($apg_wallet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apg_wallet_id when calling getPaymentByReferenceCode'
            );
        }
        // verify the required parameter 'reference_code' is set
        if ($reference_code === null || (is_array($reference_code) && count($reference_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_code when calling getPaymentByReferenceCode'
            );
        }

        $resourcePath = '/get/{referenceCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($apg_wallet_id !== null) {
            $headerParams['APG-WALLET-ID'] = ObjectSerializer::toHeaderValue($apg_wallet_id);
        }

        // path params
        if ($reference_code !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceCode' . '}',
                ObjectSerializer::toPathValue($reference_code),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APG-API-KEY');
        if ($apiKey !== null) {
            $headers['APG-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayments
     *
     * List of payments between given dates
     *
     * @param  string $apg_wallet_id apg_wallet_id (required)
     * @param  string $page Page number (optional)
     * @param  string $size Page size (optional)
     * @param  string $sort Sort column and direction (optional)
     * @param  string $created_date_greater_than Created date greater than (optional)
     * @param  string $created_date_to_less_than_or_equal Created date less than or equal (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AyriaPaymentV1DTO[]
     */
    public function getPayments($apg_wallet_id, $page = null, $size = null, $sort = null, $created_date_greater_than = null, $created_date_to_less_than_or_equal = null)
    {
        list($response) = $this->getPaymentsWithHttpInfo($apg_wallet_id, $page, $size, $sort, $created_date_greater_than, $created_date_to_less_than_or_equal);
        return $response;
    }

    /**
     * Operation getPaymentsWithHttpInfo
     *
     * List of payments between given dates
     *
     * @param  string $apg_wallet_id (required)
     * @param  string $page Page number (optional)
     * @param  string $size Page size (optional)
     * @param  string $sort Sort column and direction (optional)
     * @param  string $created_date_greater_than Created date greater than (optional)
     * @param  string $created_date_to_less_than_or_equal Created date less than or equal (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AyriaPaymentV1DTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentsWithHttpInfo($apg_wallet_id, $page = null, $size = null, $sort = null, $created_date_greater_than = null, $created_date_to_less_than_or_equal = null)
    {
        $request = $this->getPaymentsRequest($apg_wallet_id, $page, $size, $sort, $created_date_greater_than, $created_date_to_less_than_or_equal);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AyriaPaymentV1DTO[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AyriaPaymentV1DTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AyriaPaymentV1DTO[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AyriaPaymentV1DTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentsAsync
     *
     * List of payments between given dates
     *
     * @param  string $apg_wallet_id (required)
     * @param  string $page Page number (optional)
     * @param  string $size Page size (optional)
     * @param  string $sort Sort column and direction (optional)
     * @param  string $created_date_greater_than Created date greater than (optional)
     * @param  string $created_date_to_less_than_or_equal Created date less than or equal (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentsAsync($apg_wallet_id, $page = null, $size = null, $sort = null, $created_date_greater_than = null, $created_date_to_less_than_or_equal = null)
    {
        return $this->getPaymentsAsyncWithHttpInfo($apg_wallet_id, $page, $size, $sort, $created_date_greater_than, $created_date_to_less_than_or_equal)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentsAsyncWithHttpInfo
     *
     * List of payments between given dates
     *
     * @param  string $apg_wallet_id (required)
     * @param  string $page Page number (optional)
     * @param  string $size Page size (optional)
     * @param  string $sort Sort column and direction (optional)
     * @param  string $created_date_greater_than Created date greater than (optional)
     * @param  string $created_date_to_less_than_or_equal Created date less than or equal (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentsAsyncWithHttpInfo($apg_wallet_id, $page = null, $size = null, $sort = null, $created_date_greater_than = null, $created_date_to_less_than_or_equal = null)
    {
        $returnType = '\OpenAPI\Client\Model\AyriaPaymentV1DTO[]';
        $request = $this->getPaymentsRequest($apg_wallet_id, $page, $size, $sort, $created_date_greater_than, $created_date_to_less_than_or_equal);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayments'
     *
     * @param  string $apg_wallet_id (required)
     * @param  string $page Page number (optional)
     * @param  string $size Page size (optional)
     * @param  string $sort Sort column and direction (optional)
     * @param  string $created_date_greater_than Created date greater than (optional)
     * @param  string $created_date_to_less_than_or_equal Created date less than or equal (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentsRequest($apg_wallet_id, $page = null, $size = null, $sort = null, $created_date_greater_than = null, $created_date_to_less_than_or_equal = null)
    {
        // verify the required parameter 'apg_wallet_id' is set
        if ($apg_wallet_id === null || (is_array($apg_wallet_id) && count($apg_wallet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apg_wallet_id when calling getPayments'
            );
        }

        $resourcePath = '/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($created_date_greater_than !== null) {
            if('form' === 'form' && is_array($created_date_greater_than)) {
                foreach($created_date_greater_than as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['createdDate.greaterThan'] = $created_date_greater_than;
            }
        }
        // query params
        if ($created_date_to_less_than_or_equal !== null) {
            if('form' === 'form' && is_array($created_date_to_less_than_or_equal)) {
                foreach($created_date_to_less_than_or_equal as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['createdDateTo.lessThanOrEqual'] = $created_date_to_less_than_or_equal;
            }
        }

        // header params
        if ($apg_wallet_id !== null) {
            $headerParams['APG-WALLET-ID'] = ObjectSerializer::toHeaderValue($apg_wallet_id);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APG-API-KEY');
        if ($apiKey !== null) {
            $headers['APG-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentCancel
     *
     * Cancel a  payment
     *
     * @param  string $apg_wallet_id apg_wallet_id (required)
     * @param  \OpenAPI\Client\Model\AyriaPaymentV1CancelCommand $ayria_payment_v1_cancel_command ayria_payment_v1_cancel_command (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AyriaPaymentV1DTO
     */
    public function paymentCancel($apg_wallet_id, $ayria_payment_v1_cancel_command = null)
    {
        list($response) = $this->paymentCancelWithHttpInfo($apg_wallet_id, $ayria_payment_v1_cancel_command);
        return $response;
    }

    /**
     * Operation paymentCancelWithHttpInfo
     *
     * Cancel a  payment
     *
     * @param  string $apg_wallet_id (required)
     * @param  \OpenAPI\Client\Model\AyriaPaymentV1CancelCommand $ayria_payment_v1_cancel_command (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AyriaPaymentV1DTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentCancelWithHttpInfo($apg_wallet_id, $ayria_payment_v1_cancel_command = null)
    {
        $request = $this->paymentCancelRequest($apg_wallet_id, $ayria_payment_v1_cancel_command);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AyriaPaymentV1DTO' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AyriaPaymentV1DTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AyriaPaymentV1DTO';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AyriaPaymentV1DTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation paymentCancelAsync
     *
     * Cancel a  payment
     *
     * @param  string $apg_wallet_id (required)
     * @param  \OpenAPI\Client\Model\AyriaPaymentV1CancelCommand $ayria_payment_v1_cancel_command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentCancelAsync($apg_wallet_id, $ayria_payment_v1_cancel_command = null)
    {
        return $this->paymentCancelAsyncWithHttpInfo($apg_wallet_id, $ayria_payment_v1_cancel_command)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentCancelAsyncWithHttpInfo
     *
     * Cancel a  payment
     *
     * @param  string $apg_wallet_id (required)
     * @param  \OpenAPI\Client\Model\AyriaPaymentV1CancelCommand $ayria_payment_v1_cancel_command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentCancelAsyncWithHttpInfo($apg_wallet_id, $ayria_payment_v1_cancel_command = null)
    {
        $returnType = '\OpenAPI\Client\Model\AyriaPaymentV1DTO';
        $request = $this->paymentCancelRequest($apg_wallet_id, $ayria_payment_v1_cancel_command);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentCancel'
     *
     * @param  string $apg_wallet_id (required)
     * @param  \OpenAPI\Client\Model\AyriaPaymentV1CancelCommand $ayria_payment_v1_cancel_command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentCancelRequest($apg_wallet_id, $ayria_payment_v1_cancel_command = null)
    {
        // verify the required parameter 'apg_wallet_id' is set
        if ($apg_wallet_id === null || (is_array($apg_wallet_id) && count($apg_wallet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apg_wallet_id when calling paymentCancel'
            );
        }

        $resourcePath = '/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($apg_wallet_id !== null) {
            $headerParams['APG-WALLET-ID'] = ObjectSerializer::toHeaderValue($apg_wallet_id);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($ayria_payment_v1_cancel_command)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($ayria_payment_v1_cancel_command));
            } else {
                $httpBody = $ayria_payment_v1_cancel_command;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APG-API-KEY');
        if ($apiKey !== null) {
            $headers['APG-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentCreate
     *
     * Add a new payment
     *
     * @param  string $apg_wallet_id apg_wallet_id (required)
     * @param  \OpenAPI\Client\Model\AyriaPaymentV1Command $ayria_payment_v1_command ayria_payment_v1_command (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AyriaPaymentV1DTO
     */
    public function paymentCreate($apg_wallet_id, $ayria_payment_v1_command = null)
    {
        list($response) = $this->paymentCreateWithHttpInfo($apg_wallet_id, $ayria_payment_v1_command);
        return $response;
    }

    /**
     * Operation paymentCreateWithHttpInfo
     *
     * Add a new payment
     *
     * @param  string $apg_wallet_id (required)
     * @param  \OpenAPI\Client\Model\AyriaPaymentV1Command $ayria_payment_v1_command (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AyriaPaymentV1DTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentCreateWithHttpInfo($apg_wallet_id, $ayria_payment_v1_command = null)
    {
        $request = $this->paymentCreateRequest($apg_wallet_id, $ayria_payment_v1_command);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\AyriaPaymentV1DTO' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AyriaPaymentV1DTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AyriaPaymentV1DTO';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AyriaPaymentV1DTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation paymentCreateAsync
     *
     * Add a new payment
     *
     * @param  string $apg_wallet_id (required)
     * @param  \OpenAPI\Client\Model\AyriaPaymentV1Command $ayria_payment_v1_command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentCreateAsync($apg_wallet_id, $ayria_payment_v1_command = null)
    {
        return $this->paymentCreateAsyncWithHttpInfo($apg_wallet_id, $ayria_payment_v1_command)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentCreateAsyncWithHttpInfo
     *
     * Add a new payment
     *
     * @param  string $apg_wallet_id (required)
     * @param  \OpenAPI\Client\Model\AyriaPaymentV1Command $ayria_payment_v1_command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentCreateAsyncWithHttpInfo($apg_wallet_id, $ayria_payment_v1_command = null)
    {
        $returnType = '\OpenAPI\Client\Model\AyriaPaymentV1DTO';
        $request = $this->paymentCreateRequest($apg_wallet_id, $ayria_payment_v1_command);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentCreate'
     *
     * @param  string $apg_wallet_id (required)
     * @param  \OpenAPI\Client\Model\AyriaPaymentV1Command $ayria_payment_v1_command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentCreateRequest($apg_wallet_id, $ayria_payment_v1_command = null)
    {
        // verify the required parameter 'apg_wallet_id' is set
        if ($apg_wallet_id === null || (is_array($apg_wallet_id) && count($apg_wallet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apg_wallet_id when calling paymentCreate'
            );
        }

        $resourcePath = '/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($apg_wallet_id !== null) {
            $headerParams['APG-WALLET-ID'] = ObjectSerializer::toHeaderValue($apg_wallet_id);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($ayria_payment_v1_command)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($ayria_payment_v1_command));
            } else {
                $httpBody = $ayria_payment_v1_command;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APG-API-KEY');
        if ($apiKey !== null) {
            $headers['APG-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation verifyPaymentByReferenceCode
     *
     * Verify payment with referenceCode
     *
     * @param  string $apg_wallet_id apg_wallet_id (required)
     * @param  string $reference_code ReferenceCode of payment to verify (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AyriaPaymentV1DTO
     */
    public function verifyPaymentByReferenceCode($apg_wallet_id, $reference_code)
    {
        list($response) = $this->verifyPaymentByReferenceCodeWithHttpInfo($apg_wallet_id, $reference_code);
        return $response;
    }

    /**
     * Operation verifyPaymentByReferenceCodeWithHttpInfo
     *
     * Verify payment with referenceCode
     *
     * @param  string $apg_wallet_id (required)
     * @param  string $reference_code ReferenceCode of payment to verify (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AyriaPaymentV1DTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function verifyPaymentByReferenceCodeWithHttpInfo($apg_wallet_id, $reference_code)
    {
        $request = $this->verifyPaymentByReferenceCodeRequest($apg_wallet_id, $reference_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AyriaPaymentV1DTO' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AyriaPaymentV1DTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AyriaPaymentV1DTO';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AyriaPaymentV1DTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation verifyPaymentByReferenceCodeAsync
     *
     * Verify payment with referenceCode
     *
     * @param  string $apg_wallet_id (required)
     * @param  string $reference_code ReferenceCode of payment to verify (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verifyPaymentByReferenceCodeAsync($apg_wallet_id, $reference_code)
    {
        return $this->verifyPaymentByReferenceCodeAsyncWithHttpInfo($apg_wallet_id, $reference_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation verifyPaymentByReferenceCodeAsyncWithHttpInfo
     *
     * Verify payment with referenceCode
     *
     * @param  string $apg_wallet_id (required)
     * @param  string $reference_code ReferenceCode of payment to verify (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verifyPaymentByReferenceCodeAsyncWithHttpInfo($apg_wallet_id, $reference_code)
    {
        $returnType = '\OpenAPI\Client\Model\AyriaPaymentV1DTO';
        $request = $this->verifyPaymentByReferenceCodeRequest($apg_wallet_id, $reference_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'verifyPaymentByReferenceCode'
     *
     * @param  string $apg_wallet_id (required)
     * @param  string $reference_code ReferenceCode of payment to verify (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function verifyPaymentByReferenceCodeRequest($apg_wallet_id, $reference_code)
    {
        // verify the required parameter 'apg_wallet_id' is set
        if ($apg_wallet_id === null || (is_array($apg_wallet_id) && count($apg_wallet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apg_wallet_id when calling verifyPaymentByReferenceCode'
            );
        }
        // verify the required parameter 'reference_code' is set
        if ($reference_code === null || (is_array($reference_code) && count($reference_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_code when calling verifyPaymentByReferenceCode'
            );
        }

        $resourcePath = '/verify/{referenceCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($apg_wallet_id !== null) {
            $headerParams['APG-WALLET-ID'] = ObjectSerializer::toHeaderValue($apg_wallet_id);
        }

        // path params
        if ($reference_code !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceCode' . '}',
                ObjectSerializer::toPathValue($reference_code),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APG-API-KEY');
        if ($apiKey !== null) {
            $headers['APG-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
